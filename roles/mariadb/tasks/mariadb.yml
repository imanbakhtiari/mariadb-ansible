- name: Update apt chache
  apt:
    update_cache: yes

- name: Upgrade packages
  apt:
    update_cache: yes
    upgrade: yes

- name: Install packages
  apt:
    pkg:
      - python3-pip
      - python3-dev
      - libpq-dev
      - gcc
      - jq
      - curl
      - git
      - vim
      - nload
      - mariadb-server
    state: present

- name: Remove specific lines from mariadb.cnf
  block:
    - name: Remove specific lines from mariadb.cnf
      ansible.builtin.replace:
        path: /etc/mysql/mariadb.cnf
        regexp: "{{ item.regexp }}"
        replace: ""
      loop:
        - { regexp: "^\\s*\\[mariadb\\]\\s*$" } # Remove [mariadb] section
        - { regexp: "^\\s*bind-address\\s*=.*" } # Remove bind-address line
        - { regexp: "^\\s*server-id\\s*=.*" } # Remove server-id line
        - { regexp: "^\\s*log_bin\\s*=.*" } # Remove log_bin line
  ignore_errors: yes

- name: Add configurations to mariadb.cnf
  ansible.builtin.lineinfile:
    path: /etc/mysql/mariadb.cnf
    line: |
      [mariadb]
      bind-address = 0.0.0.0
      server-id = {{ server_id }}
      log_bin = mysql-bin
    insertafter: EOF

- name: Start and enable the mariadb service
  ansible.builtin.service:
    name: mariadb
    state: restarted
    enabled: yes

- name: CHANGE root PASS
  ansible.builtin.shell:
    cmd: sudo mysql -u root --skip-password -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ new_root_password }}';);"
  ignore_errors: yes

- name: Remove replica user if exist
  ansible.builtin.shell:
    cmd: sudo mysql -u root -p{{ new_root_password }} -e "DELETE FROM mysql.user WHERE user = 'replica' AND host = '%' AND EXISTS (SELECT 1 FROM mysql.user WHERE user = 'replica' AND host = '%');"

- name: CREATE REPLICA USER IN MASTER
  ansible.builtin.shell:
    cmd: sudo mysql -u root -p{{ new_root_password }} -e "CREATE USER 'replica'@'%' IDENTIFIED BY '{{ replica_password }}'; GRANT REPLICATION SLAVE ON *.* TO 'replica'@'%'; FLUSH PRIVILEGES;"
  run_once: true
  when: inventory_hostname in ['db1']
  ignore_errors: yes

- name: Gather file and position data from mariadb master status
  ansible.builtin.shell:
    cmd: sudo mysql -u root -p{{ new_root_password }} -e "SHOW MASTER STATUS \G;"
  register: master_status_output
  run_once: true
  when: inventory_hostname in ['db1']

- name: Extract file and position values
  set_fact:
    master_file: "{{ master_status_output.stdout_lines | regex_search('File: (.*)', '\\1') }}"
    master_position: "{{ master_status_output.stdout_lines | regex_search('Position: (.*)', '\\1') }}"
  run_once: true
  when: master_status_output.stdout_lines is defined

- name: Debug file and position values
  debug:
    msg: "File: {{ master_file }}, Position: {{ master_position }}, Your Master IP: {{ hostvars['db1']['private_ip'] }}"
  run_once: true

- name: Set new replication settings on slave databases (Not Recommended)
  ansible.builtin.shell:
    cmd: >
      sudo mysql -u root -P 3306 -p"{{ new_root_password }}" -e "CHANGE MASTER TO MASTER_HOST='{{ hostvars['db1']['private_ip'] }}',MASTER_USER='replica',MASTER_PASSWORD='{{ replica_password }}',MASTER_LOG_FILE='{{ master_file }}',MASTER_LOG_POS='{{ master_position }}';"
  when: inventory_hostname in ['db2', 'db3']
  register: mysql_output

- name: debug
  debug:
    msg: "{{ mysql_output.stdout }}" # Print detailed error output (if available)
#  when: mysql_output.rc != 0 # Only print error if the command failed

- name: Start and enable the mariadb service
  ansible.builtin.service:
    name: mariadb
    state: restarted
  when: inventory_hostname in ['db1', 'db2', 'db3']